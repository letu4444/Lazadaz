package Lazadar.config.authori;

import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.oidc.OidcIdToken;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import Lazadar.config.PasswordConfig;
import Lazadar.model.UserCredential;
import Lazadar.repository.RoleRepository;
import Lazadar.repository.UserCredenRepository;
import Lazadar.services.AuthService;
import Lazadar.uitl.Next;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;



@Component
public class OAuth2LoginSuccessHandler implements AuthenticationSuccessHandler{
	
	
    private SavedRequestAwareAuthenticationSuccessHandler SuccessHandler;
	
	@Autowired
	private UserCredenRepository credenRepository;
	
	@Autowired
	private AuthService authService;
	
	@Autowired
	private RoleRepository repository;
	
	@Autowired
	private Next next;
	
	@Autowired
	private PasswordConfig passwordConfig;

	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		String redirectUrl ="";
		// đây để kiểm tra xem Security có tên code là gì rồi xét cho nó vào được đâu
		// Nếu nó là bên bán hàng thì đk vào bên bán hàng //Nếu nó là user thì chỉ đk
		// vào mua hàng
		//Kiểm tra xem họ đăng nhập bằg hình thức nào
		if(authentication.getPrincipal().getClass() == CustomOauth2User.class) {
			 OidcUser oidcUser = (OidcUser) authentication.getPrincipal();
             OidcIdToken idToken = oidcUser.getIdToken();
             String idTokenValue = idToken.getTokenValue();
			CustomOauth2User oauth2User = (CustomOauth2User) authentication.getPrincipal();
			String oauth2ClientName = oauth2User.getOauth2ClientName();
			UserCredential userCredential = oauth2User.getCredential();
			if(credenRepository.findByEmail(userCredential.getEmail()) == null) {
				userCredential.setPassword(passwordConfig.passwordEncoder().encode("anhtu1996"));
				userCredential.setRoles(new HashSet<>(Arrays.asList(repository.findByCode("user"))));
				credenRepository.save(userCredential);
				if(next.getNext() != null) {
					redirectUrl= next.getNext();
				}else {
					redirectUrl = "/trangchu";
				}
				
			
             }else {
            		if(next.getNext() != null) {
    					redirectUrl= next.getNext();
    				}else {
    					redirectUrl = "/trangchu";
    				}
			}
		}else{
			if(next.getNext() != null) {
				redirectUrl= next.getNext();
			}else {
				redirectUrl = "/trangchu";
			}
		}
		 new DefaultRedirectStrategy().sendRedirect(request, response, redirectUrl);
		
	}

}
